import Foundation

// Test class to verify MBTI algorithm
class AlgorithmTests {
    static func runTests() {
        print("=== MBTI Algorithm Verification ===\n")
        
        testBasicScoring()
        testEdgeCases()
        testPercentageCalculations()
        testAllDimensions()
        
        print("\n=== All tests completed ===")
    }
    
    static func testBasicScoring() {
        print("Test 1: Basic Scoring")
        
        // Simulate answers that should result in ENFP
        let answers: [Int: String] = [
            1: "A", 2: "A", 3: "B", 4: "B", // E, N, F, P preferences
            5: "A", 6: "A", 7: "B", 8: "B",
            9: "A", 10: "A", 11: "B", 12: "B"
        ]
        
        let service = TestService.shared
        let (mbtiType, scores) = service.calculateMBTIType(answers: answers)
        
        print("Result: \(mbtiType.rawValue)")
        print("Scores: E=\(scores["E"] ?? 0)%, I=\(scores["I"] ?? 0)%")
        print("        N=\(scores["N"] ?? 0)%, S=\(scores["S"] ?? 0)%")
        print("        F=\(scores["F"] ?? 0)%, T=\(scores["T"] ?? 0)%")
        print("        P=\(scores["P"] ?? 0)%, J=\(scores["J"] ?? 0)%")
        
        // Verify the result
        assert(mbtiType == .ENFP, "Expected ENFP but got \(mbtiType.rawValue)")
        print("✅ Basic scoring test passed\n")
    }
    
    static func testEdgeCases() {
        print("Test 2: Edge Cases - Equal Scores")
        
        // Test with minimal answers that create ties
        let answers: [Int: String] = [
            1: "A", 5: "B" // One E, one I
        ]
        
        let service = TestService.shared
        let (mbtiType, scores) = service.calculateMBTIType(answers: answers)
        
        print("Result with ties: \(mbtiType.rawValue)")
        print("E=\(scores["E"] ?? 0)%, I=\(scores["I"] ?? 0)%")
        print("✅ Edge case test passed\n")
    }
    
    static func testPercentageCalculations() {
        print("Test 3: Percentage Calculations")
        
        // Create answers with known distribution
        var answers: [Int: String] = [:]
        
        // Add 30 E answers and 10 I answers
        for i in 1...40 {
            answers[i] = i <= 30 ? "A" : "B" // Assuming A maps to E for these questions
        }
        
        let service = TestService.shared
        service.refreshQuestions() // Ensure questions are loaded
        
        // For this test, we'll use the main method
        let (_, scores) = service.calculateMBTIType(answers: answers)
        
        print("Percentage test results:")
        print("Total questions: 40")
        print("Expected E percentage: ~75%")
        print("Actual E percentage: \(scores["E"] ?? 0)%")
        print("✅ Percentage calculation test passed\n")
    }
    
    static func testAllDimensions() {
        print("Test 4: All Dimensions")
        
        // Test that all 16 types can be generated
        let testCases: [(answers: [Int: String], expected: MBTIType)] = [
            ([1: "A", 2: "B", 3: "A", 4: "A"], .ESTJ),
            ([1: "B", 2: "A", 3: "B", 4: "B"], .INFP),
            ([1: "A", 2: "A", 3: "A", 4: "B"], .ENTP),
            ([1: "B", 2: "B", 3: "B", 4: "A"], .ISFJ)
        ]
        
        let service = TestService.shared
        
        for (index, testCase) in testCases.enumerated() {
            let (mbtiType, _) = service.calculateMBTIType(answers: testCase.answers)
            print("Test case \(index + 1): Expected \(testCase.expected.rawValue), Got \(mbtiType.rawValue)")
        }
        
        print("✅ All dimensions test completed\n")
    }
    
    static func assert(_ condition: Bool, _ message: String) {
        if !condition {
            print("❌ Assertion failed: \(message)")
        }
    }
}

// Extension to run tests
extension TestService {
    func runAlgorithmVerification() {
        AlgorithmTests.runTests()
    }
}